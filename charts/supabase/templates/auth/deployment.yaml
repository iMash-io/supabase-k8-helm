{{- if .Values.auth.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.auth.fullname" . }}
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
spec:
  {{- if not .Values.auth.autoscaling.enabled }}
  replicas: {{ .Values.auth.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "supabase.auth.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.auth.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "supabase.auth.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.auth.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "supabase.auth.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.auth.podSecurityContext | nindent 8 }}

      initContainers:
        - name: init-db
          image: postgres:17-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_HOST
              {{- if .Values.db.enabled }}
              value: {{ include "supabase.db.fullname" . | quote }}
              {{- else }}
              value: {{ .Values.auth.environment.DB_HOST | quote }}
              {{- end }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.db.secretRef }}
                  name: {{ .Values.secret.db.secretRef }}
                  key: {{ .Values.secret.db.secretRefKey.username | default "username" }}
                  {{- else }}
                  name: {{ include "supabase.secret.db" . }}
                  key: username
                  {{- end }}
            - name: DB_PORT
              value: {{ .Values.auth.environment.DB_PORT | quote }}
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.db.secretRef }}
                  name: {{ .Values.secret.db.secretRef }}
                  key: {{ .Values.secret.db.secretRefKey.database | default "database" }}
                  {{- else }}
                  name: {{ include "supabase.secret.db" . }}
                  key: database
                  {{- end }}
          command:
            - "sh"
            - "-c"
            - |
              until pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME"; do
                echo "Waiting for database to start..."
                sleep 2
              done
              echo "Database is ready"

      containers:
        - name: {{ include "supabase.auth.name" . }}
          securityContext:
            {{- toYaml .Values.auth.securityContext | nindent 12 }}
          image: "{{ .Values.auth.image.repository }}:{{ .Values.auth.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.auth.image.pullPolicy }}
          env:
            - name: GOTRUE_DB_DRIVER
              value: "postgres"
            - name: DATABASE_URL
              value: "{{ .Values.auth.environment.DATABASE_URL }}"
            - name: GOTRUE_DATABASE_URL
              value: "{{ .Values.auth.environment.DATABASE_URL }}"
            - name: GOTRUE_API_HOST
              value: "{{ .Values.auth.environment.GOTRUE_API_HOST }}"
            - name: GOTRUE_API_PORT
              value: "{{ .Values.auth.environment.GOTRUE_API_PORT }}"
            - name: GOTRUE_SITE_URL
              value: "{{ .Values.auth.environment.GOTRUE_SITE_URL }}"
            - name: GOTRUE_URI_ALLOW_LIST
              value: "{{ .Values.auth.environment.GOTRUE_URI_ALLOW_LIST }}"
            - name: GOTRUE_DISABLE_SIGNUP
              value: "{{ .Values.auth.environment.GOTRUE_DISABLE_SIGNUP }}"
            - name: GOTRUE_EXTERNAL_EMAIL_ENABLED
              value: "{{ .Values.auth.environment.GOTRUE_EXTERNAL_EMAIL_ENABLED }}"
            - name: GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID
              value: "{{ .Values.auth.environment.GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID }}"
            - name: GOTRUE_EXTERNAL_GOOGLE_ENABLED
              value: "{{ .Values.auth.environment.GOTRUE_EXTERNAL_GOOGLE_ENABLED }}"
            - name: GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI
              value: "{{ .Values.auth.environment.GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI }}"
            - name: GOTRUE_EXTERNAL_GOOGLE_SECRET
              value: "{{ .Values.auth.environment.GOTRUE_EXTERNAL_GOOGLE_SECRET }}"
            - name: GOTRUE_JWT_ADMIN_ROLES
              value: "{{ .Values.auth.environment.GOTRUE_JWT_ADMIN_ROLES }}"
            - name: GOTRUE_JWT_AUD
              value: "{{ .Values.auth.environment.GOTRUE_JWT_AUD }}"
            - name: GOTRUE_JWT_EXP
              value: "{{ .Values.auth.environment.GOTRUE_JWT_EXP }}"
            - name: GOTRUE_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.jwt.secretRef }}
                  name: {{ .Values.secret.jwt.secretRef }}
                  key: {{ .Values.secret.jwt.secretRefKey.secret | default "secret" }}
                  {{- else }}
                  name: {{ include "supabase.secret.jwt" . }}
                  key: secret
                  {{- end }}
            - name: GOTRUE_SMTP_USER
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.smtp.secretRef }}
                  name: {{ .Values.secret.smtp.secretRef }}
                  key: {{ .Values.secret.smtp.secretRefKey.username | default "username" }}
                  {{- else }}
                  name: {{ include "supabase.secret.smtp" . }}
                  key: username
                  {{- end }}
            - name: GOTRUE_SMTP_PASS
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.smtp.secretRef }}
                  name: {{ .Values.secret.smtp.secretRef }}
                  key: {{ .Values.secret.smtp.secretRefKey.password | default "password" }}
                  {{- else }}
                  name: {{ include "supabase.secret.smtp" . }}
                  key: password
                  {{- end }}

          {{- with .Values.auth.envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.auth.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.auth.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 9999
              protocol: TCP
          {{- with .Values.auth.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.auth.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}

      {{- with .Values.auth.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.auth.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.auth.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.auth.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
